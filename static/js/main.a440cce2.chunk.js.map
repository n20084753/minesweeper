{"version":3,"sources":["containers/Game/Cell.js","components/Header/index.jsx","components/GridCell/index.jsx","containers/Game/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","row","col","Object","classCallCheck","this","bomb","revealed","flagged","neighbourCount","grid","floodFill","i","j","length","reveal","Header","props","levelOptions","entries","levels","map","_ref","index","_ref2","slicedToArray","key","value","react_default","a","createElement","charAt","substring","toLocaleLowerCase","className","level","timer","onChange","onLevelChange","GridCell","cellState","onClick","onContextMenu","e","onRightClick","GAME_STATUS","IN_PROGRESS","FINISHED","LEVEL","EASY","MEDIUM","HARD","Game","state","gameStatus","revealedCount","result","componentWillUnmount","clearInterval","_this","interval","populateGrid","populateBombs","options","push","Math","floor","random","_options$index","splice","countBombs","rowLength","colLength","count","x","y","getRevealedCellsCount","event","startFreshGame","target","resetGame","finished","setState","gameOver","revealCell","toggleFlag","preventDefault","formattedTime","min","sec","concat","padStart","_this2","Array","from","setInterval","_this3","girdCells","rowItem","rowIndex","colItem","colIndex","components_GridCell","Fragment","components_Header","Component","App","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a440cce2.chunk.js","sourcesContent":["class Cell {\n    constructor(row, col) {\n        this.bomb = false;\n        this.row = row;\n        this.col = col;\n        this.revealed = false;\n        this.flagged = false;\n        this.neighbourCount = 0;\n    }\n\n    reveal(grid) {\n        this.revealed = true;\n        if (this.neighbourCount === 0) {\n            this.floodFill(grid);\n        }\n    }\n\n    floodFill(grid) {\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                let row = this.row + i;\n                let col = this.col + j;\n                if (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length) {\n                    if (!grid[row][col].bomb && !grid[row][col].revealed) {\n                        grid[row][col].reveal(grid);\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default Cell;","import React from \"react\";\n\nimport './header.scss';\n\nconst Header = (props) => {\n\n    let levelOptions = Object.entries(props.levels).map(([key, value], index) => {\n        return <option key={key} value={value}>{key.charAt(0) + key.substring(1).toLocaleLowerCase()}</option>;\n    });\n\n    return (\n        <div className=\"app-header\">\n            <h3 className=\"title header-cell left\">\n                Minesweeper\n            </h3>\n            <h3 className=\"header-cell center\">\n                <i className=\"bomb icon\" />{props.level}\n            </h3>\n            <h3 className=\"header-cell center\">\n                <i className=\"clock outline icon\" />{props.timer}  \n            </h3>\n            <div className=\"header-cell right\">\n                <select value={props.level} onChange={props.onLevelChange}>\n                    {levelOptions}\n                </select> \n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nimport './grid-cell.scss';\n\nconst GridCell = (props) => {\n    let className = props.cellState.flagged ? \n        'grid-cell flagged' :\n        props.cellState.revealed ? \n            'grid-cell revealed' : \n            'grid-cell';\n    return (\n        <div \n            onClick = {() => props.onClick(props.cellState.row, props.cellState.col)} \n            onContextMenu={(e) => props.onRightClick(e, props.cellState.row, props.cellState.col)} \n            className = {className}\n        >\n            {\n                props.cellState.flagged ? \n                    <span><i className = \"flag icon\" /></span> :\n                    props.cellState.bomb ?  \n                        <span><i className = \"bomb icon\" /></span> : \n                        (props.cellState.neighbourCount > 0) && <span>{props.cellState.neighbourCount}</span>\n            }\n        </div>\n    );\n}\n\nexport default GridCell;","import React, { Component } from \"react\";\n\nimport './game.scss';\n\nimport Cell from './Cell';\nimport Header from '../../components/Header';\nimport GridCell from '../../components/GridCell';\n\nconst GAME_STATUS = {\n    IN_PROGRESS: 0,\n    FINISHED: 1\n};\n\nconst LEVEL = {\n    EASY: 8,\n    MEDIUM: 10,\n    HARD: 12\n};\n\nclass Game extends Component {\n    state = {\n        gameStatus: GAME_STATUS.IN_PROGRESS,\n        level: LEVEL.MEDIUM,\n        timer: 0,\n        grid: [],\n        revealedCount: 0,\n        result: 0, // 0 - lose  | 1 - win\n    }\n\n    componentDidMount() {\n        this.startFreshGame(this.state.level);\n    }\n\n    componentWillUnmount = () => clearInterval(this.interval)\n    \n    // Initializes new game when changing levels or trying again\n    startFreshGame(level) {\n        let grid = Array.from(Array(+level), () => new Array(+level));\n        this.populateGrid(grid);\n        this.populateBombs(grid);\n        this.countBombs(grid);\n        this.setState({\n            gameStatus: GAME_STATUS.IN_PROGRESS,\n            level: +level,\n            timer: 0,\n            grid: grid,\n            revealedCount: 0,\n            result: 0\n        });\n        \n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n        \n        this.interval = setInterval(() => {\n            this.setState({ timer: this.state.timer + 1 });\n        }, 1000);\n    }\n\n    // Initializes the gird with cells\n    populateGrid = (grid) => {\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n                grid[i][j] = new Cell(i, j);\n            }\n        }\n    }\n\n    // Sets (level) mines or bombs randomly in the grid\n    populateBombs = (grid) => {\n        var options = [];\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n                options.push([i, j]);\n            }\n        }\n\n        for (let i = 0; i < grid.length; i++) {\n            let index = Math.floor(Math.random() * options.length);\n            let [row, col] = options[index];\n\n            options.splice(index, 1);\n\n            grid[row][col].bomb = true;\n        }\n    }\n\n    // Updates the cell's neighbour count based on number of mines that surrounding it\n    countBombs = (grid) => {\n        let rowLength = grid.length;\n        let colLength = grid[0].length;\n\n        for (let i = 0; i < rowLength; i++) {\n            for (let j = 0; j < colLength; j++) {\n                if (grid[i][j].bomb) {\n                    grid[i][j].neighbourCount = -1;\n                    continue;\n                }\n\n                let count = 0;\n                for (let x = -1; x <= 1; x++) {\n                    for (let y = -1; y <= 1; y++) {\n                        let row = i + x;\n                        let col = j + y;\n                        if (row >= 0 && row < rowLength && col >= 0 && col < colLength) {\n                            if (grid[row][col].bomb) {\n                                count++;\n                            }\n                        }\n                    }\n                }\n                grid[i][j].neighbourCount = count;\n            }\n        }\n    }\n\n    // Gets the number of revealed cells in the grid\n    getRevealedCellsCount = () => {\n        let grid = this.state.grid;\n        let revealed = 0;\n        for(let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n                if (grid[i][j].revealed) {\n                    revealed++;\n                }\n            }\n        }\n\n        return revealed;\n    }\n\n    // Handles the level dropdown onChange event, Updates game level\n    onLevelChange = (event) => {\n        this.startFreshGame(event.target.value);\n    }\n    \n    // Updates the gameStatus to INITIAL and resets the result to default\n    resetGame = () => this.startFreshGame(this.state.level)\n    \n    // Win state when all the non mine or bomb areas are revelaed\n    finished = () => {\n        clearInterval(this.interval);\n        this.setState({\n            gameStatus: GAME_STATUS.FINISHED,\n            result: 1\n        });\n    }\n\n    // When user steps on the mone or bomb\n    gameOver = () => {\n        let grid = this.state.grid;\n\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[i].length; j++) {\n                grid[i][j].revealed = true;\n            }\n        }\n\n        this.setState({\n            grid: grid,\n            gameStatus: GAME_STATUS.FINISHED\n        });\n\n        clearInterval(this.interval);\n    }\n\n    // Handles the click on cell\n    revealCell = (row, col) => {\n        let grid = this.state.grid;\n\n        if (grid[row][col].flagged) {\n            return;\n        }\n\n        if (grid[row][col].bomb) {\n            return this.gameOver();\n        }\n        \n        grid[row][col].reveal(grid);\n        \n        let level = this.state.level;\n        let revealedCount = this.getRevealedCellsCount();\n        \n        if (((level * level) - revealedCount) === level) {\n            this.finished();            \n        }\n\n        this.setState({\n            grid: grid,\n            revealedCount: revealedCount\n        });\n    }\n\n    // Handles the right click on the cell, marks the cell as flagged\n    toggleFlag = (e, row, col) => {\n        e.preventDefault();\n        let grid = this.state.grid;\n\n        grid[row][col].flagged = !grid[row][col].flagged;\n\n        this.setState({ grid: grid });\n    }\n\n    // Formats the timer to mm:ss time format\n    formattedTime = (timer) => {\n        let min = Math.floor(timer / 60) + \"\";\n        let sec = (timer - min * 60) + \"\";\n\n        return `${min.padStart(2, '0')}:${sec.padStart(2, '0')}`;\n    }\n\n    render() {\n        let grid = this.state.grid;\n        let girdCells = grid.map((rowItem, rowIndex) => {\n            return (\n                <div key={rowIndex} className=\"grid-row\">\n                    {rowItem.map((colItem, colIndex) => {\n                        return (\n                            <GridCell\n                                onClick={this.revealCell}\n                                onRightClick={this.toggleFlag}\n                                className=\"grid-cell\"\n                                cellState={colItem}\n                                key={colIndex}\n                            />\n                        );\n                    })}\n                </div>\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <div className=\"game-container ui segment\">\n                    <Header \n                        timer={this.formattedTime(this.state.timer)}\n                        level={this.state.level}\n                        levels={LEVEL}\n                        onLevelChange={this.onLevelChange}\n                    />\n                    <div className=\"grid-container\">\n                        {girdCells}\n                    </div>                    \n                    {\n                        this.state.gameStatus === GAME_STATUS.FINISHED &&\n                            <div className=\"result-container\">\n                                <div className=\"game-result\">\n                                <h1>\n                                    <i className=\"clock icon\"/>\n                                    {\n                                        this.state.result ? \n                                            (\n                                                <React.Fragment>\n                                                    <p>{this.formattedTime(this.state.timer)}</p>\n                                                    <p>Congrats</p>\n                                                </React.Fragment>\n                                            ) : \n                                            (\n                                                <React.Fragment>\n                                                    <p>---</p>\n                                                    <p>OOPS!</p>\n                                                </React.Fragment>\n                                            )\n                                    }\n                                </h1>\n                                </div>\n                                <div className=\"footer-button\">\n                                    <button onClick={this.resetGame} className=\"ui large green button\">\n                                        <i className=\"redo icon\"/> Try again\n                                    </button>\n                                </div>\n                            </div>\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\n\nimport Game from './containers/Game';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Game />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}